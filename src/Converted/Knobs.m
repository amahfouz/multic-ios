//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Knobs.java
//
//  Created by amahfouz on 6/4/14.
//

#include "Knob.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

#import "Knobs.h"

@implementation MMCKnobs

- (id)initWithMMCKnob_Pos:(MMCKnob_Pos *)topKnobPos
          withMMCKnob_Pos:(MMCKnob_Pos *)botKnobPos {
  if (self = [super init]) {
    if (topKnobPos == nil || botKnobPos == nil) @throw [[JavaLangIllegalArgumentException alloc] init];
    self->topKnobPos_ = topKnobPos;
    self->botKnobPos_ = botKnobPos;
  }
  return self;
}

+ (MMCKnobs *)createInitWithBoolean:(BOOL)randomFirstPos {
  int firstKnobPos;
  int secondKnobPos;
  if (randomFirstPos) {
    firstKnobPos = (int) ([JavaLangMath floorWithDouble:[JavaLangMath random] * 9] + 1);
    secondKnobPos = (int) ([JavaLangMath floorWithDouble:[JavaLangMath random] * 9] + 1);
  }
  else {
    firstKnobPos = 1;
    secondKnobPos = 1;
  }
  return [[MMCKnobs alloc] initWithMMCKnob_Pos:[[MMCKnob_Pos alloc] initWithInt:firstKnobPos] withMMCKnob_Pos:[[MMCKnob_Pos alloc] initWithInt:secondKnobPos]];
}

- (int)getCurProduct {
  return [((MMCKnob_Pos *) nil_chk(topKnobPos_)) get] * [((MMCKnob_Pos *) nil_chk(botKnobPos_)) get];
}

- (int)getPosForWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)loc {
  return [((MMCKnob_Pos *) nil_chk([self getObjForWithMMCKnob_LocationEnum:loc])) get];
}

- (int)getOtherPosWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)loc {
  switch ([loc ordinal]) {
    case MMCKnob_Location_BOTTOM:
    return [((MMCKnob_Pos *) nil_chk(topKnobPos_)) get];
    case MMCKnob_Location_TOP:
    return [((MMCKnob_Pos *) nil_chk(botKnobPos_)) get];
    default:
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
}

- (BOOL)areAtSamePos {
  return [((MMCKnob_Pos *) nil_chk(topKnobPos_)) get] == [((MMCKnob_Pos *) nil_chk(botKnobPos_)) get];
}

- (int)getProdIfMovedWithInt:(int)pos
    withMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)knobLoc {
  return pos * [self getOtherPosWithMMCKnob_LocationEnum:knobLoc];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"Top = %d, Bottom = %d", [((MMCKnob_Pos *) nil_chk(topKnobPos_)) get], [((MMCKnob_Pos *) nil_chk(botKnobPos_)) get]];
}

- (void)setWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)loc
                            withInt:(int)pos {
  [((MMCKnob_Pos *) nil_chk([self getObjForWithMMCKnob_LocationEnum:loc])) setWithInt:pos];
}

- (MMCKnob_Pos *)getObjForWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)loc {
  switch ([loc ordinal]) {
    case MMCKnob_Location_TOP:
    return topKnobPos_;
    case MMCKnob_Location_BOTTOM:
    return botKnobPos_;
    default:
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
}

- (void)copyAllFieldsTo:(MMCKnobs *)other {
  [super copyAllFieldsTo:other];
  other->botKnobPos_ = botKnobPos_;
  other->topKnobPos_ = topKnobPos_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithMMCKnob_Pos:withMMCKnob_Pos:", "Knobs", NULL, 0x2, NULL },
    { "createInitWithBoolean:", "createInit", "Lcom.mahfouz.multic.core.Knobs;", 0x9, NULL },
    { "getCurProduct", NULL, "I", 0x1, NULL },
    { "getPosForWithMMCKnob_LocationEnum:", "getPosFor", "I", 0x1, NULL },
    { "getOtherPosWithMMCKnob_LocationEnum:", "getOtherPos", "I", 0x1, NULL },
    { "areAtSamePos", NULL, "Z", 0x1, NULL },
    { "getProdIfMovedWithInt:withMMCKnob_LocationEnum:", "getProdIfMoved", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "setWithMMCKnob_LocationEnum:withInt:", "set", "V", 0x1, NULL },
    { "getObjForWithMMCKnob_LocationEnum:", "getObjFor", "Lcom.mahfouz.multic.core.Knob$Pos;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "topKnobPos_", NULL, 0x12, "Lcom.mahfouz.multic.core.Knob$Pos;", NULL,  },
    { "botKnobPos_", NULL, 0x12, "Lcom.mahfouz.multic.core.Knob$Pos;", NULL,  },
  };
  static J2ObjcClassInfo _MMCKnobs = { "Knobs", "com.mahfouz.multic.core", NULL, 0x11, 10, methods, 2, fields, 0, NULL};
  return &_MMCKnobs;
}

@end
