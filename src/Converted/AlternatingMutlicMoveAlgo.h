//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: AlternatingMutlicMoveAlgo.java
//
//  Created by amahfouz on 6/4/14.
//

#ifndef _MMC_AlternatingMutlicMoveAlgo_H_
#define _MMC_AlternatingMutlicMoveAlgo_H_

@class MMCMutableGameState;
@protocol MMCMove;

#import "JreEmulation.h"
#include "MulticMoveAlgo.h"


/**
 @brief Hybrid algorithm that alternates between two algorithms.
 */
@interface MMCAlternatingMutlicMoveAlgo : NSObject < MMCMulticMoveAlgo > {
 @public
  id<MMCMulticMoveAlgo> firstAlgo_;
  id<MMCMulticMoveAlgo> secondAlgo_;
  int numTimesToRunFirstAlgoBeforeAlternating_;
  int remainingCounter_;
}

- (id)initWithMMCMulticMoveAlgo:(id<MMCMulticMoveAlgo>)firstAlgo
          withMMCMulticMoveAlgo:(id<MMCMulticMoveAlgo>)secondAlgo
                        withInt:(int)numTimesToRunFirstAlgoBeforeAlternating;

- (id<MMCMove>)findNextMoveWithMMCMutableGameState:(MMCMutableGameState *)curGameState;

- (void)copyAllFieldsTo:(MMCAlternatingMutlicMoveAlgo *)other;

@end

__attribute__((always_inline)) inline void MMCAlternatingMutlicMoveAlgo_init() {}

J2OBJC_FIELD_SETTER(MMCAlternatingMutlicMoveAlgo, firstAlgo_, id<MMCMulticMoveAlgo>)
J2OBJC_FIELD_SETTER(MMCAlternatingMutlicMoveAlgo, secondAlgo_, id<MMCMulticMoveAlgo>)

typedef MMCAlternatingMutlicMoveAlgo ComMahfouzMulticCoreAlternatingMutlicMoveAlgo;

#endif // _MMC_AlternatingMutlicMoveAlgo_H_
