//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Four.java
//
//  Created by amahfouz on 6/4/14.
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Player.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

#import "Four.h"

@implementation MMCFour

- (id)initWithIntArray:(IOSIntArray *)indices {
  if (self = [super init]) {
    if ((indices == nil) || (int) [indices count] != 4) @throw [[JavaLangIllegalArgumentException alloc] init];
    self->indices_ = indices;
  }
  return self;
}

- (IOSIntArray *)getIndices {
  return indices_;
}

- (int)evaluateWithMMCPlayerEnumArray:(IOSObjectArray *)cellValues {
  int numPc = 0;
  int numHuman = 0;
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(indices_)) count]; i++) {
    if (IOSObjectArray_Get(nil_chk(cellValues), IOSIntArray_Get(indices_, i)) == MMCPlayerEnum_get_COMPUTER()) numPc++;
    else if (IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, i)) == MMCPlayerEnum_get_HUMAN()) numHuman++;
  }
  return [self evalWithInt:numPc withInt:numHuman];
}

- (MMCPlayerEnum *)getValueIfAllSameWithMMCPlayerEnumArray:(IOSObjectArray *)cellValues {
  return (IOSObjectArray_Get(nil_chk(cellValues), IOSIntArray_Get(nil_chk(indices_), 0)) == IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, 1))) && (IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, 0)) == IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, 2))) && (IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, 0)) == IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, 3))) ? IOSObjectArray_Get(cellValues, IOSIntArray_Get(indices_, 0)) : nil;
}

- (int)getFirstEmptyIndexWithMMCPlayerEnumArray:(IOSObjectArray *)cellValues {
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(indices_)) count]; i++) {
    if (IOSObjectArray_Get(nil_chk(cellValues), IOSIntArray_Get(indices_, i)) == nil) return IOSIntArray_Get(indices_, i);
  }
  return -1;
}

- (int)evalWithInt:(int)numP1
           withInt:(int)numP2 {
  switch (numP1) {
    case 0:
    switch (numP2) {
      case 0:
      return MMCFour_VALUE_MIXED_OR_EMPTY_ROW;
      case 1:
      return -MMCFour_VALUE_ONE_IN_A_ROW;
      case 2:
      return -MMCFour_VALUE_TWO_IN_A_ROW;
      case 3:
      return -MMCFour_VALUE_THREE_IN_A_ROW;
      case 4:
      return -MMCFour_VALUE_WIN;
      default:
      @throw [[JavaLangIllegalArgumentException alloc] init];
    }
    case 1:
    return (numP2 == 0) ? MMCFour_VALUE_ONE_IN_A_ROW : MMCFour_VALUE_MIXED_OR_EMPTY_ROW;
    case 2:
    return (numP2 == 0) ? MMCFour_VALUE_TWO_IN_A_ROW : MMCFour_VALUE_MIXED_OR_EMPTY_ROW;
    case 3:
    return (numP2 == 0) ? MMCFour_VALUE_THREE_IN_A_ROW : MMCFour_VALUE_MIXED_OR_EMPTY_ROW;
    case 4:
    return MMCFour_VALUE_WIN;
    default:
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
}

- (BOOL)isTerminalPositionWithMMCPlayerEnumArray:(IOSObjectArray *)cellValues {
  int value = [self evaluateWithMMCPlayerEnumArray:cellValues];
  return [MMCFour isTerminalPositionWithInt:value];
}

+ (BOOL)isTerminalPositionWithInt:(int)valueForFour {
  return [JavaLangMath absWithInt:valueForFour] >= MMCFour_VALUE_WIN;
}

- (void)copyAllFieldsTo:(MMCFour *)other {
  [super copyAllFieldsTo:other];
  other->indices_ = indices_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithIntArray:", "Four", NULL, 0x1, NULL },
    { "getIndices", NULL, "[I", 0x1, NULL },
    { "evaluateWithMMCPlayerEnumArray:", "evaluate", "I", 0x1, NULL },
    { "getValueIfAllSameWithMMCPlayerEnumArray:", "getValueIfAllSame", "Lcom.mahfouz.multic.core.Player;", 0x1, NULL },
    { "getFirstEmptyIndexWithMMCPlayerEnumArray:", "getFirstEmptyIndex", "I", 0x1, NULL },
    { "evalWithInt:withInt:", "eval", "I", 0x2, NULL },
    { "isTerminalPositionWithMMCPlayerEnumArray:", "isTerminalPosition", "Z", 0x1, NULL },
    { "isTerminalPositionWithInt:", "isTerminalPosition", "Z", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "VALUE_WIN_", NULL, 0x19, "I", NULL, .constantValue.asInt = MMCFour_VALUE_WIN },
    { "VALUE_FORBIDDEN_FACTOR_", NULL, 0x19, "I", NULL, .constantValue.asInt = MMCFour_VALUE_FORBIDDEN_FACTOR },
    { "VALUE_THREE_IN_A_ROW_", NULL, 0x19, "I", NULL, .constantValue.asInt = MMCFour_VALUE_THREE_IN_A_ROW },
    { "VALUE_MIXED_OR_EMPTY_ROW_", NULL, 0x1a, "I", NULL, .constantValue.asInt = MMCFour_VALUE_MIXED_OR_EMPTY_ROW },
    { "VALUE_ONE_IN_A_ROW_", NULL, 0x1a, "I", NULL, .constantValue.asInt = MMCFour_VALUE_ONE_IN_A_ROW },
    { "VALUE_TWO_IN_A_ROW_", NULL, 0x1a, "I", NULL, .constantValue.asInt = MMCFour_VALUE_TWO_IN_A_ROW },
    { "indices_", NULL, 0x12, "[I", NULL,  },
  };
  static J2ObjcClassInfo _MMCFour = { "Four", "com.mahfouz.multic.core", NULL, 0x11, 8, methods, 7, fields, 0, NULL};
  return &_MMCFour;
}

@end
