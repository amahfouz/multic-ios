//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: BoardState.java
//
//  Created by amahfouz on 6/4/14.
//

#include "BoardDef.h"
#include "Four.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "MulticGameCell.h"
#include "Player.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#import "BoardState.h"

@implementation MMCBoardState

- (id)init {
  if (self = [super init]) {
    self->cellValues_ = [IOSObjectArray arrayWithLength:MMCBoardDef_NUM_CELLS type:[IOSClass classWithClass:[MMCPlayerEnum class]]];
  }
  return self;
}

- (int)evaluateWithBoolean:(BOOL)doAdvancedEval {
  IOSObjectArray *fours = MMCBoardDef_get_FOURS_();
  id<JavaUtilList> winningIndices = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> seizedFactors = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> losingIndices = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> tabooFactors = [[JavaUtilArrayList alloc] init];
  int result = 0;
  int valueForFour;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(fours)) count]; i++) {
    MMCFour *four = IOSObjectArray_Get(fours, i);
    valueForFour = [((MMCFour *) nil_chk(four)) evaluateWithMMCPlayerEnumArray:cellValues_];
    if ([MMCFour isTerminalPositionWithInt:valueForFour]) return valueForFour;
    if (doAdvancedEval) {
      if (valueForFour == MMCFour_VALUE_THREE_IN_A_ROW && [self isDuplicate4thCellWithMMCFour:four withJavaUtilList:seizedFactors withJavaUtilList:winningIndices]) continue;
      if (valueForFour == -MMCFour_VALUE_THREE_IN_A_ROW && [self isDuplicate4thCellWithMMCFour:four withJavaUtilList:tabooFactors withJavaUtilList:losingIndices]) continue;
    }
    result += valueForFour;
  }
  if (doAdvancedEval) {
    result += [seizedFactors size] * MMCFour_VALUE_FORBIDDEN_FACTOR;
    result -= [tabooFactors size] * MMCFour_VALUE_FORBIDDEN_FACTOR;
  }
  return result;
}

- (MMCPlayerEnum *)getWinnerIfAnyWithInt:(int)product {
  IOSIntArray *foursOfLastFilledCell = [MMCBoardDef getFourIndicesForWithInt:product];
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(foursOfLastFilledCell)) count]; i++) {
    MMCFour *four = IOSObjectArray_Get(nil_chk(MMCBoardDef_get_FOURS_()), IOSIntArray_Get(foursOfLastFilledCell, i));
    MMCPlayerEnum *valueIfAllSame = [((MMCFour *) nil_chk(four)) getValueIfAllSameWithMMCPlayerEnumArray:[self getCellValues]];
    if (valueIfAllSame != nil) return valueIfAllSame;
  }
  return nil;
}

- (IOSIntArray *)getWinningFourIfAny {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(MMCBoardDef_get_FOURS_())) count]; i++) {
    MMCFour *four = IOSObjectArray_Get(MMCBoardDef_get_FOURS_(), i);
    if ([((MMCFour *) nil_chk(four)) isTerminalPositionWithMMCPlayerEnumArray:cellValues_]) return [four getIndices];
  }
  return nil;
}

- (MMCMulticGameCell *)getCellStateWithInt:(int)product {
  int cellIndex = [MMCBoardDef getIndexForProductWithInt:product];
  return [[MMCMulticGameCell alloc] initWithInt:cellIndex withMMCPlayerEnum:IOSObjectArray_Get(nil_chk(cellValues_), cellIndex)];
}

- (BOOL)isEmptyCellWithInt:(int)product {
  int cellIndex = [MMCBoardDef getIndexForProductWithInt:product];
  return IOSObjectArray_Get(nil_chk(cellValues_), cellIndex) == nil;
}

- (int)getNumCells {
  return (int) [((IOSObjectArray *) nil_chk([self getCellValues])) count];
}

- (NSString *)getCellContentWithInt:(int)index {
  return [NSString valueOfInt:IOSIntArray_Get(nil_chk(MMCBoardDef_get_PRODUCTS_()), index)];
}

- (MMCPlayerEnum *)getCellOccupantIfAnyWithInt:(int)index {
  return IOSObjectArray_Get(nil_chk([self getCellValues]), index);
}

- (void)fillCellWithInt:(int)product
      withMMCPlayerEnum:(MMCPlayerEnum *)value {
  int cellIndex = [MMCBoardDef getIndexForProductWithInt:product];
  (void) IOSObjectArray_Set(nil_chk(cellValues_), cellIndex, value);
}

- (IOSObjectArray *)getCellValues {
  return cellValues_;
}

- (BOOL)isDuplicate4thCellWithMMCFour:(MMCFour *)fourWithThreeInRow
                     withJavaUtilList:(id<JavaUtilList>)factors
                     withJavaUtilList:(id<JavaUtilList>)cellIndices {
  int cellIndex = [((MMCFour *) nil_chk(fourWithThreeInRow)) getFirstEmptyIndexWithMMCPlayerEnumArray:cellValues_];
  if ([((id<JavaUtilList>) nil_chk(cellIndices)) containsWithId:[JavaLangInteger valueOfWithInt:cellIndex]]) return YES;
  [cellIndices addWithId:[JavaLangInteger valueOfWithInt:cellIndex]];
  IOSIntArray *factorsForCell = [MMCBoardDef getFactorsForProductAtIndexWithInt:cellIndex];
  for (int f = 0; f < (int) [((IOSIntArray *) nil_chk(factorsForCell)) count]; f++) [((id<JavaUtilList>) nil_chk(factors)) addWithId:[JavaLangInteger valueOfWithInt:IOSIntArray_Get(factorsForCell, f)]];
  return NO;
}

- (void)copyAllFieldsTo:(MMCBoardState *)other {
  [super copyAllFieldsTo:other];
  other->cellValues_ = cellValues_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "BoardState", NULL, 0x1, NULL },
    { "evaluateWithBoolean:", "evaluate", "I", 0x1, NULL },
    { "getWinnerIfAnyWithInt:", "getWinnerIfAny", "Lcom.mahfouz.multic.core.Player;", 0x1, NULL },
    { "getWinningFourIfAny", NULL, "[I", 0x1, NULL },
    { "getCellStateWithInt:", "getCellState", "Lcom.mahfouz.multic.core.MulticGameCell;", 0x1, NULL },
    { "isEmptyCellWithInt:", "isEmptyCell", "Z", 0x1, NULL },
    { "getNumCells", NULL, "I", 0x1, NULL },
    { "getCellContentWithInt:", "getCellContent", "Ljava.lang.String;", 0x1, NULL },
    { "getCellOccupantIfAnyWithInt:", "getCellOccupantIfAny", "Lcom.mahfouz.multic.core.Player;", 0x1, NULL },
    { "fillCellWithInt:withMMCPlayerEnum:", "fillCell", "V", 0x1, NULL },
    { "getCellValues", NULL, "[Lcom.mahfouz.multic.core.Player;", 0x1, NULL },
    { "isDuplicate4thCellWithMMCFour:withJavaUtilList:withJavaUtilList:", "isDuplicate4thCell", "Z", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "cellValues_", NULL, 0x12, "[Lcom.mahfouz.multic.core.Player;", NULL,  },
  };
  static J2ObjcClassInfo _MMCBoardState = { "BoardState", "com.mahfouz.multic.core", NULL, 0x11, 12, methods, 1, fields, 0, NULL};
  return &_MMCBoardState;
}

@end
