//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: XGameModel.java
//
//  Created by amahfouz on 6/4/14.
//

#include "Difficulty.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "Knob.h"
#include "Knobs.h"
#include "Move.h"
#include "MoveIterator.h"
#include "MulticException.h"
#include "MulticGameCell.h"
#include "MulticLog.h"
#include "MulticPrefs.h"
#include "MutableGameState.h"
#include "Player.h"
#include "XGameGridUiModel.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"

#import "XGameModel.h"

BOOL MMUXGameModel_initialized = NO;

@implementation MMUXGameModel

MMCDifficultyEnum * MMUXGameModel_DEFAULT_DIFFICULTY_;

- (id)initWithMMCDifficultyEnum:(MMCDifficultyEnum *)difficulty
     withMMUXGameModel_Listener:(id<MMUXGameModel_Listener>)listener
                    withBoolean:(BOOL)randomFirstPos
                  withFirstTurn:(BOOL)humanStarts
               withMMUMulticLog:(id<MMUMulticLog>)log {
  if (self = [super init]) {
    if (listener == nil || log == nil) @throw [[JavaLangIllegalArgumentException alloc] init];
    self->listener_ = listener;
    self->gameState_ = [MMCMutableGameState createInitWithBoolean:randomFirstPos
                                            withMMCDifficultyEnum:difficulty
                                                      withBoolean:! humanStarts
                                                 withMMUMulticLog:log];
    self->log_ = log;
    if ([self getTurnPlayer] == MMCPlayerEnum_get_COMPUTER()) [self findComputerMove];
  }
  return self;
}

- (MMCPlayerEnum *)getTurnPlayer {
  @synchronized(self) {
    {
      if ([self gameHasEnded]) return nil;
      return [((MMCMutableGameState *) nil_chk(gameState_)) isComputerTurn] ? MMCPlayerEnum_get_COMPUTER() : MMCPlayerEnum_get_HUMAN();
    }
  }
}

- (id<MMUXGameGridUiModel>)getGridUiModel {
  @synchronized(self) {
    {
      return [((MMCMutableGameState *) nil_chk(gameState_)) getGridModel];
    }
  }
}

- (int)getSelectedIndexFor:(MMCKnob_LocationEnum *)knobLoc {
  @synchronized(self) {
    {
      int factor = [((MMCKnobs *) nil_chk([((MMCMutableGameState *) nil_chk(gameState_)) getKnobs])) getPosForWithMMCKnob_LocationEnum:knobLoc];
      return factor - 1;
    }
  }
}

- (MMCPlayerEnum *)getWinnerIfAny {
  @synchronized(self) {
    {
      return [((MMCMutableGameState *) nil_chk(gameState_)) getWinnerIfAny];
    }
  }
}

- (IOSIntArray *)getWinningFourIfAny {
  @synchronized(self) {
    {
      return [((MMCMutableGameState *) nil_chk(gameState_)) getWinningFourIfAny];
    }
  }
}

- (void)setListenerWithMMUXGameModel_Listener:(id<MMUXGameModel_Listener>)listener {
  @synchronized(self) {
    {
      if (listener == nil) @throw [[JavaLangIllegalArgumentException alloc] init];
      self->listener_ = listener;
    }
  }
}

- (MMCDifficultyEnum *)getDifficulty {
  return [((MMCMutableGameState *) nil_chk(gameState_)) getDifficulty];
}

- (void)makeUserMoveWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)knobLoc
                                     withInt:(int)pos {
  @synchronized(self) {
    {
      if ([self getTurnPlayer] != MMCPlayerEnum_get_HUMAN()) @throw [[MMCMulticException alloc] initWithNSString:@"Not your turn!" withMMCMulticGameCell:nil];
      int factor = pos + 1;
      if ([self gameHasEnded]) @throw [[MMCMulticException alloc] initWithNSString:@"Game is already over!" withMMCMulticGameCell:nil];
      if ([((MMCMutableGameState *) nil_chk(gameState_)) isComputerTurn]) @throw [[MMCMulticException alloc] initWithNSString:@"It is not your turn!" withMMCMulticGameCell:nil];
      MMCMulticGameCell *cellToFill = [gameState_ getCellStateWithMMCKnob_LocationEnum:knobLoc withInt:factor];
      if (![((MMCMulticGameCell *) nil_chk(cellToFill)) isEmpty]) @throw [[MMCMulticException alloc] initWithNSString:@"Invalid move! Square already filled." withMMCMulticGameCell:cellToFill];
      MMCMutableGameState_Memento *stateBeforeUserMove = [gameState_ makeMoveWithMMCMove:[[MMCMove_Immutable alloc] initWithInt:factor withMMCKnob_LocationEnum:knobLoc]];
      [((id<MMUXGameModel_Listener>) nil_chk(listener_)) cellStateChangedWithInt:[((MMCMutableGameState_Memento *) nil_chk(stateBeforeUserMove)) getCellIndex]];
      if (![self gameHasEnded]) [self findComputerMove];
    }
  }
}

- (BOOL)gameHasEnded {
  return ([((MMCMutableGameState *) nil_chk(gameState_)) getWinnerIfAny] != nil) || ![self hasValidMoves];
}

- (BOOL)hasValidMoves {
  return [((MMCMoveIterator *) [[MMCMoveIterator alloc] initWithMMCMutableGameState:gameState_]) hasNext];
}

- (void)findComputerMove {
  [((JavaLangThread *) [[JavaLangThread alloc] initWithJavaLangRunnable:[[MMUXGameModel_$1 alloc] initWithMMUXGameModel:self]]) start];
}

- (void)performComputerMove {
  @synchronized(self) {
    {
      id<MMCMove> computerMove = [((MMCMutableGameState *) nil_chk(gameState_)) findNextComputerMove];
      MMCMutableGameState_Memento *stateBeforeComputerMoved = [gameState_ makeMoveWithMMCMove:computerMove];
      [((id<MMUMulticLog>) nil_chk(log_)) debugWithNSString:[NSString stringWithFormat:@"Current board state = %d", [gameState_ evalBoardState]]];
      [((id<MMUXGameModel_Listener>) nil_chk(listener_)) knobStateChangedWithMMCKnob_LocationEnum:[((id<MMCMove>) nil_chk(computerMove)) getKnobLoc]];
      [listener_ cellStateChangedWithInt:[((MMCMutableGameState_Memento *) nil_chk(stateBeforeComputerMoved)) getCellIndex]];
    }
  }
}

+ (void)initialize {
  if (self == [MMUXGameModel class]) {
    MMUXGameModel_DEFAULT_DIFFICULTY_ = MMCDifficultyEnum_get_MEDIUM();
    MMUXGameModel_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(MMUXGameModel *)other {
  [super copyAllFieldsTo:other];
  other->gameState_ = gameState_;
  other->listener_ = listener_;
  other->log_ = log_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithMMCDifficultyEnum:withMMUXGameModel_Listener:withBoolean:withMMUMulticLog:", "XGameModel", NULL, 0x1, NULL },
    { "getTurnPlayer", NULL, "Lcom.mahfouz.multic.core.Player;", 0x21, NULL },
    { "getGridUiModel", NULL, "Lcom.mahfouz.multic.uim.XGameGridUiModel;", 0x21, NULL },
    { "getSelectedIndexForWithMMCKnob_LocationEnum:", "getSelectedIndexFor", "I", 0x21, NULL },
    { "getWinnerIfAny", NULL, "Lcom.mahfouz.multic.core.Player;", 0x21, NULL },
    { "getWinningFourIfAny", NULL, "[I", 0x21, NULL },
    { "setListenerWithMMUXGameModel_Listener:", "setListener", "V", 0x21, NULL },
    { "getDifficulty", NULL, "Lcom.mahfouz.multic.core.Difficulty;", 0x1, NULL },
    { "makeUserMoveWithMMCKnob_LocationEnum:withInt:", "makeUserMove", "V", 0x21, "Lcom.mahfouz.multic.core.MulticException;" },
    { "gameHasEnded", NULL, "Z", 0x2, NULL },
    { "hasValidMoves", NULL, "Z", 0x2, NULL },
    { "findComputerMove", NULL, "V", 0x2, NULL },
    { "performComputerMove", NULL, "V", 0x22, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DEFAULT_DIFFICULTY_", NULL, 0x19, "Lcom.mahfouz.multic.core.Difficulty;", &MMUXGameModel_DEFAULT_DIFFICULTY_,  },
    { "gameState_", NULL, 0x12, "Lcom.mahfouz.multic.core.MutableGameState;", NULL,  },
    { "log_", NULL, 0x12, "Lcom.mahfouz.multic.util.MulticLog;", NULL,  },
    { "listener_", NULL, 0x2, "Lcom.mahfouz.multic.uim.XGameModel$Listener;", NULL,  },
  };
  static J2ObjcClassInfo _MMUXGameModel = { "XGameModel", "com.mahfouz.multic.uim", NULL, 0x11, 13, methods, 4, fields, 0, NULL};
  return &_MMUXGameModel;
}

@end

@interface MMUXGameModel_Listener : NSObject
@end

@implementation MMUXGameModel_Listener

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "cellStateChangedWithInt:", "cellStateChanged", "V", 0x401, NULL },
    { "knobStateChangedWithMMCKnob_LocationEnum:", "knobStateChanged", "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _MMUXGameModel_Listener = { "Listener", "com.mahfouz.multic.uim", "XGameModel", 0x201, 2, methods, 0, NULL, 0, NULL};
  return &_MMUXGameModel_Listener;
}

@end

@implementation MMUXGameModel_$1

- (void)run {
  @try {
    if ([((MMCDifficultyEnum *) nil_chk([((MMCMutableGameState *) nil_chk(this$0_->gameState_)) getDifficulty])) ordinal] < [((MMCDifficultyEnum *) nil_chk(MMCDifficultyEnum_get_EXPERT())) ordinal]) [JavaLangThread sleepWithLong:700];
  }
  @catch (JavaLangInterruptedException *ex) {
  }
  [this$0_ performComputerMove];
}

- (id)initWithMMUXGameModel:(MMUXGameModel *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithMMUXGameModel:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.mahfouz.multic.uim.XGameModel;", NULL,  },
  };
  static J2ObjcClassInfo _MMUXGameModel_$1 = { "$1", "com.mahfouz.multic.uim", "XGameModel", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_MMUXGameModel_$1;
}

@end
