//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: MutableGameState.java
//
//  Created by amahfouz on 6/4/14.
//

#include "AlternatingMutlicMoveAlgo.h"
#include "BoardDef.h"
#include "BoardState.h"
#include "Difficulty.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "Knob.h"
#include "Knobs.h"
#include "MinimaxMulticMoveAlgo.h"
#include "Move.h"
#include "MulticGameCell.h"
#include "MulticLog.h"
#include "MulticMoveAlgo.h"
#include "MulticRandomAlgo.h"
#include "Player.h"
#include "XGameGridUiModel.h"

#import "MutableGameState.h"

@implementation MMCMutableGameState

- (id)initWithMMCKnobs:(MMCKnobs *)knobs
     withMMCBoardState:(MMCBoardState *)boardState
 withMMCDifficultyEnum:(MMCDifficultyEnum *)difficulty
           withBoolean:(BOOL)isComputerTurn
      withMMUMulticLog:(id<MMUMulticLog>)log {
  if (self = [super init]) {
    self->knobs_ = knobs;
    self->boardState_ = boardState;
    self->difficulty_ = difficulty;
    self->isComputerTurn__ = isComputerTurn;
    self->algo_ = [self createAlgoWithMMUMulticLog:log];
  }
  return self;
}

+ (MMCMutableGameState *)createInitWithBoolean:(BOOL)randomFirstPos
                         withMMCDifficultyEnum:(MMCDifficultyEnum *)difficulty
                                   withBoolean:(BOOL)computerStarts
                              withMMUMulticLog:(id<MMUMulticLog>)log {
  return [[MMCMutableGameState alloc] initWithMMCKnobs:[MMCKnobs createInitWithBoolean:randomFirstPos] withMMCBoardState:[[MMCBoardState alloc] init] withMMCDifficultyEnum:difficulty withBoolean:computerStarts withMMUMulticLog:log];
}

- (MMCKnobs *)getKnobs {
  return knobs_;
}

- (BOOL)isComputerTurn {
  return self->isComputerTurn__;
}

- (MMCPlayerEnum *)getWinnerIfAny {
  return [((MMCBoardState *) nil_chk(boardState_)) getWinnerIfAnyWithInt:[((MMCKnobs *) nil_chk(knobs_)) getCurProduct]];
}

- (IOSIntArray *)getWinningFourIfAny {
  return [((MMCBoardState *) nil_chk(boardState_)) getWinningFourIfAny];
}

- (MMCMulticGameCell *)getCellStateWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)knobLoc
                                                    withInt:(int)pos {
  return [((MMCBoardState *) nil_chk(boardState_)) getCellStateWithInt:[((MMCKnobs *) nil_chk(knobs_)) getProdIfMovedWithInt:pos withMMCKnob_LocationEnum:knobLoc]];
}

- (BOOL)isValidMoveWithMMCKnob_LocationEnum:(MMCKnob_LocationEnum *)knobLoc
                                    withInt:(int)pos {
  return [((MMCBoardState *) nil_chk(boardState_)) isEmptyCellWithInt:[((MMCKnobs *) nil_chk(knobs_)) getProdIfMovedWithInt:pos withMMCKnob_LocationEnum:knobLoc]];
}

- (int)evalBoardState {
  return [((MMCBoardState *) nil_chk(boardState_)) evaluateWithBoolean:[((MMCDifficultyEnum *) nil_chk(difficulty_)) isEqual:MMCDifficultyEnum_get_EXPERT()]];
}

- (id<MMUXGameGridUiModel>)getGridModel {
  return boardState_;
}

- (MMCDifficultyEnum *)getDifficulty {
  return difficulty_;
}

- (id<MMCMove>)findNextComputerMove {
  return [((id<MMCMulticMoveAlgo>) nil_chk(algo_)) findNextMoveWithMMCMutableGameState:self];
}

- (MMCMutableGameState_Memento *)makeMoveWithMMCMove:(id<MMCMove>)move {
  BOOL wasComputerTurnBeforeMove = isComputerTurn__;
  int posBeforeMove = [((MMCKnobs *) nil_chk(knobs_)) getPosForWithMMCKnob_LocationEnum:[((id<MMCMove>) nil_chk(move)) getKnobLoc]];
  [knobs_ setWithMMCKnob_LocationEnum:[move getKnobLoc] withInt:[move getPos]];
  int product = [knobs_ getCurProduct];
  MMCPlayerEnum *cellValue = isComputerTurn__ ? MMCPlayerEnum_get_COMPUTER() : MMCPlayerEnum_get_HUMAN();
  [((MMCBoardState *) nil_chk(boardState_)) fillCellWithInt:product withMMCPlayerEnum:cellValue];
  self->isComputerTurn__ = !isComputerTurn__;
  return [[MMCMutableGameState_Memento alloc] initWithMMCMutableGameState:self withInt:product withMMCMove:[[MMCMove_Immutable alloc] initWithInt:posBeforeMove withMMCKnob_LocationEnum:[move getKnobLoc]] withBoolean:wasComputerTurnBeforeMove];
}

- (void)applyUndoWithMMCMutableGameState_Memento:(MMCMutableGameState_Memento *)undoInfo {
  [((MMCMutableGameState_Memento *) nil_chk(undoInfo)) apply];
}

- (id<MMCMulticMoveAlgo>)createAlgoWithMMUMulticLog:(id<MMUMulticLog>)log {
  int maxDepth = [((MMCDifficultyEnum *) nil_chk(difficulty_)) ordinal];
  id<MMCMulticMoveAlgo> random = [[MMCMulticRandomAlgo alloc] init];
  id<MMCMulticMoveAlgo> minmax = [[MMCMinimaxMulticMoveAlgo alloc] initWithInt:maxDepth withMMUMulticLog:log];
  switch ([difficulty_ ordinal]) {
    case MMCDifficulty_SILLY:
    return random;
    case MMCDifficulty_EASY:
    return [[MMCAlternatingMutlicMoveAlgo alloc] initWithMMCMulticMoveAlgo:minmax withMMCMulticMoveAlgo:random withInt:1];
    case MMCDifficulty_MEDIUM:
    return [[MMCAlternatingMutlicMoveAlgo alloc] initWithMMCMulticMoveAlgo:minmax withMMCMulticMoveAlgo:random withInt:4];
    case MMCDifficulty_HARD:
    case MMCDifficulty_EXPERT:
    return minmax;
    default:
    return minmax;
  }
}

- (void)copyAllFieldsTo:(MMCMutableGameState *)other {
  [super copyAllFieldsTo:other];
  other->algo_ = algo_;
  other->boardState_ = boardState_;
  other->difficulty_ = difficulty_;
  other->isComputerTurn__ = isComputerTurn__;
  other->knobs_ = knobs_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithMMCKnobs:withMMCBoardState:withMMCDifficultyEnum:withBoolean:withMMUMulticLog:", "MutableGameState", NULL, 0x2, NULL },
    { "createInitWithBoolean:withMMCDifficultyEnum:withBoolean:withMMUMulticLog:", "createInit", "Lcom.mahfouz.multic.core.MutableGameState;", 0x9, NULL },
    { "getKnobs", NULL, "Lcom.mahfouz.multic.core.Knobs;", 0x1, NULL },
    { "isComputerTurn", NULL, "Z", 0x1, NULL },
    { "getWinnerIfAny", NULL, "Lcom.mahfouz.multic.core.Player;", 0x1, NULL },
    { "getWinningFourIfAny", NULL, "[I", 0x1, NULL },
    { "getCellStateWithMMCKnob_LocationEnum:withInt:", "getCellState", "Lcom.mahfouz.multic.core.MulticGameCell;", 0x1, NULL },
    { "isValidMoveWithMMCKnob_LocationEnum:withInt:", "isValidMove", "Z", 0x1, NULL },
    { "evalBoardState", NULL, "I", 0x1, NULL },
    { "getGridModel", NULL, "Lcom.mahfouz.multic.uim.XGameGridUiModel;", 0x1, NULL },
    { "getDifficulty", NULL, "Lcom.mahfouz.multic.core.Difficulty;", 0x1, NULL },
    { "findNextComputerMove", NULL, "Lcom.mahfouz.multic.core.Move;", 0x1, NULL },
    { "makeMoveWithMMCMove:", "makeMove", "Lcom.mahfouz.multic.core.MutableGameState$Memento;", 0x1, NULL },
    { "applyUndoWithMMCMutableGameState_Memento:", "applyUndo", "V", 0x1, NULL },
    { "createAlgoWithMMUMulticLog:", "createAlgo", "Lcom.mahfouz.multic.core.MulticMoveAlgo;", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "knobs_", NULL, 0x12, "Lcom.mahfouz.multic.core.Knobs;", NULL,  },
    { "boardState_", NULL, 0x12, "Lcom.mahfouz.multic.core.BoardState;", NULL,  },
    { "difficulty_", NULL, 0x12, "Lcom.mahfouz.multic.core.Difficulty;", NULL,  },
    { "algo_", NULL, 0x12, "Lcom.mahfouz.multic.core.MulticMoveAlgo;", NULL,  },
    { "isComputerTurn__", "isComputerTurn", 0x2, "Z", NULL,  },
  };
  static J2ObjcClassInfo _MMCMutableGameState = { "MutableGameState", "com.mahfouz.multic.core", NULL, 0x11, 15, methods, 5, fields, 0, NULL};
  return &_MMCMutableGameState;
}

@end

@implementation MMCMutableGameState_Memento

- (id)initWithMMCMutableGameState:(MMCMutableGameState *)outer$
                          withInt:(int)productCellToEmpty
                      withMMCMove:(id<MMCMove>)reverseMove
                      withBoolean:(BOOL)isComputerTurn {
  this$0_ = outer$;
  if (self = [super init]) {
    self->productCellToEmpty_ = productCellToEmpty;
    self->reverseMove_ = reverseMove;
    self->isComputerTurn_ = isComputerTurn;
  }
  return self;
}

- (int)getCellIndex {
  return [MMCBoardDef getIndexForProductWithInt:productCellToEmpty_];
}

- (void)apply {
  [((MMCBoardState *) nil_chk(this$0_->boardState_)) fillCellWithInt:productCellToEmpty_ withMMCPlayerEnum:nil];
  [((MMCKnobs *) nil_chk(this$0_->knobs_)) setWithMMCKnob_LocationEnum:[((id<MMCMove>) nil_chk(reverseMove_)) getKnobLoc] withInt:[reverseMove_ getPos]];
  this$0_->isComputerTurn__ = isComputerTurn_;
}

- (void)copyAllFieldsTo:(MMCMutableGameState_Memento *)other {
  [super copyAllFieldsTo:other];
  other->isComputerTurn_ = isComputerTurn_;
  other->productCellToEmpty_ = productCellToEmpty_;
  other->reverseMove_ = reverseMove_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithMMCMutableGameState:withInt:withMMCMove:withBoolean:", "Memento", NULL, 0x1, NULL },
    { "getCellIndex", NULL, "I", 0x1, NULL },
    { "apply", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.mahfouz.multic.core.MutableGameState;", NULL,  },
    { "productCellToEmpty_", NULL, 0x12, "I", NULL,  },
    { "reverseMove_", NULL, 0x12, "Lcom.mahfouz.multic.core.Move;", NULL,  },
    { "isComputerTurn_", NULL, 0x12, "Z", NULL,  },
  };
  static J2ObjcClassInfo _MMCMutableGameState_Memento = { "Memento", "com.mahfouz.multic.core", "MutableGameState", 0x11, 3, methods, 4, fields, 0, NULL};
  return &_MMCMutableGameState_Memento;
}

@end
